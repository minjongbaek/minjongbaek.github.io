[
{
	"uri": "/minjong/",
	"title": "백민종",
	"tags": [],
	"description": "",
	"content": "Chapter 0 백민종  파이썬을 주력으로 하는 1년차 백엔드 개발자입니다.\n Python Java JavaScript Linux  "
},
{
	"uri": "/python/",
	"title": "Pythone",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Python "
},
{
	"uri": "/linux/",
	"title": "Linux",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Linux  WSL    외부에서 WSL에 접근할 수 있도록 설정하기     WSL에서 GUI 프로그램 실행 환경 구성하기      "
},
{
	"uri": "/linux/wsl/",
	"title": "WSL",
	"tags": [],
	"description": "",
	"content": "WSL Windows Subsystem for Linux  외부에서 WSL에 접근할 수 있도록 설정하기     WSL에서 GUI 프로그램 실행 환경 구성하기     "
},
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "민종로그   백민종     Pythone     Linux    WSL    외부에서 WSL에 접근할 수 있도록 설정하기   WSL에서 GUI 프로그램 실행 환경 구성하기     "
},
{
	"uri": "/linux/wsl/ssh_port_forwarding/",
	"title": "외부에서 WSL에 접근할 수 있도록  설정하기",
	"tags": [],
	"description": "",
	"content": "WSL을 설치하고 외부에서 접속하기 위해 포워딩 설정을 하고 테스트까지 마쳤다. 그리고 퇴근 후 다시 접속을 시도했는데 잘 되지 않았다. 다음 날 확인해보니 WSL2의 ip주소가 변경되어 있었다.\nWSL2은 Hyper-V처럼 가상 이더넷을 생성하여 별도의 네트워크로 구성된다.\n위와 같은 특징 때문에 부팅할 때 마다 WSL의 ip주소가 계속 바뀐다는 것을 알게 된 후, 이를 해결할 방법을 찾다가 적절한 해결책을 찾아 공유하게 되었다.\n아래 코드를 파워쉘 스크립트로 작성 후, 적절한 이름으로 저장한다.\n$remoteport = bash.exe -c \u0026#34;ifconfig eth0 | grep \u0026#39;inet \u0026#39;\u0026#34; $found = $remoteport -match \u0026#39;\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\u0026#39;; if( $found ){ $remoteport = $matches[0]; } else{ echo \u0026#34;The Script Exited, the ip address of WSL 2 cannot be found\u0026#34;; exit; } #[Ports] #All the ports you want to forward separated by coma $ports=@(80,443,10000,3000,5000); #[Static ip] #You can change the addr to your ip config to listen to a specific address $addr=\u0026#39;0.0.0.0\u0026#39;; $ports_a = $ports -join \u0026#34;,\u0026#34;; #Remove Firewall Exception Rules iex \u0026#34;Remove-NetFireWallRule -DisplayName \u0026#39;WSL 2 Firewall Unlock\u0026#39; \u0026#34;; #adding Exception Rules for inbound and outbound Rules iex \u0026#34;New-NetFireWallRule -DisplayName \u0026#39;WSL 2 Firewall Unlock\u0026#39; -Direction Outbound -LocalPort $ports_a -Action Allow -Protocol TCP\u0026#34;; iex \u0026#34;New-NetFireWallRule -DisplayName \u0026#39;WSL 2 Firewall Unlock\u0026#39; -Direction Inbound -LocalPort $ports_a -Action Allow -Protocol TCP\u0026#34;; for( $i = 0; $i -lt $ports.length; $i++ ){ $port = $ports[$i]; iex \u0026#34;netsh interface portproxy delete v4tov4 listenport=$port listenaddress=$addr\u0026#34;; iex \u0026#34;netsh interface portproxy add v4tov4 listenport=$port listenaddress=$addr connectport=$port connectaddress=$remoteport\u0026#34;; } 위 코드를 보면 WSL의 ip를 탐색 후 기존 방화벽 룰이 있다면 제거 후 ports에 입력되는 번호로 포트를 열어주게 된다. 사용하고자 하는 번호를 입력해준다.\n포트 번호를 변경했으면, 위 코드를 부팅할 때 마다 자동으로 실행되도록 윈도우 작업 스케줄러에 등록한다.\n"
},
{
	"uri": "/linux/wsl/use-xserver/",
	"title": "WSL에서 GUI 프로그램 실행 환경 구성하기",
	"tags": [],
	"description": "",
	"content": "최근까지 회사 컴퓨터 OS로 Ubuntu를 잘사용하다가 윈도우로 갈아탔다. wine을 이용해 카카오톡도 설치하고 잘사용하던 OS를 변경한 이유는 여러가지가 있었지만 (일부 사이트 이용 제한, 사내 문서 공유 등..) 가장 큰 이유는 WSL 때문이었다.\nWSL(Windows Subsystem for Linux) 이란 이름 그대로 Linux용 Windows 하위 시스템으로 사용자가 기존 가상 머신의 오버헤드 또는 듀얼 부팅 설정 없이 대부분의 GNU/Linux 환경을 수정하지 않고 Windows에서 직접 실행할 수 있게 해준다. 공식문서를 통해 쉽게 설치할 수 있다.\nWSL 설치 및 WSL 2로 업데이트\n그런데 문제가 발생했다.\n나는 IDE로 pycharm을 사용 중인데, WSL은 기본적으로 CLI 환경이기 때문에 화면읠 띄워주기 위해 X Server가 필요했다. 혹시나 하는 마음에 윈도우용 pycharm을 설치하고 WSL 내부의 파일에 접근해보았는데 인덱싱 속도가 너무 느려서 사용하지 못할 정도였다.\n 서론은 여기까지하고 본론으로 넘어가보자.\n우선, 윈도우 내에서 구동될 X Server가 필요한데 나는 VcXsrv를 선택했다. 윈도우 패키지 관리자인 chocolatey 이용해 VcXsrv를 설치한다. (진짜 윈도우 사용하면서 apt 명령어가 새삼 편했다는 것을 깨달았다.) chocolatey은 다음 문서를 참고하여 쉽게 설치 가능하다.\nchocolatey 설치하기\npowershell에서 아래 명령어를 입력한다.\nchoco install vcxsrv -y 설치가 완료 됐다면, 프로그램을 실행시키고 다음과 같이 설정한다.\n그리고 리눅스에서 X Server의 디스플레이를 찾을 수 있도록 WSL의 사용자 홈 디렉토리에 있는 .bashrc 파일 아래에 다음과 같은 코드를 추가한다.\nexport DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'):0.0 이어서 설치한 파일을 실행하면\u0026hellip;\n리눅스 프로그램을 화면으로 볼 수 있게 됐다!\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]