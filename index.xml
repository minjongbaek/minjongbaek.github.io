<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>민종로그</title>
    <link>/</link>
    <description>Recent content on 민종로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us,ko-kr</language>
    <lastBuildDate>Wed, 03 Mar 2021 23:51:50 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Linux] /dev/null 2&gt;&amp;1</title>
      <link>/linux/redirection/</link>
      <pubDate>Wed, 03 Mar 2021 23:51:50 +0900</pubDate>
      
      <guid>/linux/redirection/</guid>
      <description>WSL에 설치한 일부 프로그램을 실행하면 터미널에 출력이 생기는게 신경쓰여 이를 해결할 방법을 찾고 있었다. 실행 명령어 뒤에 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 를 추가하여 쉽게 해결했지만, 해당 명령어가 어떤 역할을 하는지 궁금하여 내 나름대로 학습한 내용을 쓰게되었다.
저 명령어를 이해하기 위해서는 표준 입출력과 리다이렉션의 개념이 필요하다.
일반적으로 유닉스에서 동작하는 프로그램은 실행 시 입력, 출력, 오류 출력을 위한 세 개의 스트림이 자동으로 열린다. 이를 표준 스트림이라고 부른다. 그리고 이들에게는 각각 0, 1, 2의 파일 디스크립터가 부여된다.</description>
    </item>
    
    <item>
      <title>[Tomcat] Invalid Byte Tag in Constant Pool:0</title>
      <link>/error/tomcat-invalid-byte-tag-in-constant-pool/</link>
      <pubDate>Tue, 02 Feb 2021 10:06:50 +0900</pubDate>
      
      <guid>/error/tomcat-invalid-byte-tag-in-constant-pool/</guid>
      <description>예전 스프링으로 개발한 프로젝트를 업데이트 할 일이 생겼다. 클래스 파일 하나만 교체하면 될 일이어서 금방 끝나나 싶었는데..
 org.apache.tomcat.util.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool:
 프로젝트를 재시작하니 위와 같은 로그가 날 반겼다. 롤백 후 심신을 추스리고 해결책을 찾았다.
web.xml 파일에 metadata-complete=&amp;quot;true&amp;quot;를 추가해서 해결!
&amp;lt;web-app xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns=&amp;#34;http://java.sun.com/xml/ns/javaee&amp;#34; xmlns:web=&amp;#34;http://java.sun.com/xml/ns/javaee&amp;#34; xmlns:jsp=&amp;#34;http://java.sun.com/xml/ns/javaee/jsp&amp;#34; xsi:schemaLocation=&amp;#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&amp;#34; id=&amp;#34;xxxxx&amp;#34; version=&amp;#34;2.5&amp;#34; metadata-complete=&amp;#34;true&amp;#34;&amp;gt; 단, 위 방법을 사용했을 경우 주의사항이 있다.
metadata-complete=&amp;quot;true&amp;quot;를 포함하게 되면 서블릿 엔진이 구동될 때, 서블릿 관련 어노테이션들을 스캔하지 않게 된다.</description>
    </item>
    
    <item>
      <title>[Spring] gradle 버전을 지정하여 프로젝트 빌드하기</title>
      <link>/java/use-gradle-other-version/</link>
      <pubDate>Thu, 14 Jan 2021 19:14:12 +0900</pubDate>
      
      <guid>/java/use-gradle-other-version/</guid>
      <description>회사에서 예전부터 서비스 하고 있는 프로젝트에 업데이트가 필요했다. 최근에 만들어졌거나, 서비스하는 프로젝트들은 파이썬으로 개발했기 때문에 파이썬으로 개발을 하고 있는 내 입장에서 코드를 분석하고 요구사항에 맞게 수정하는게 비교적 쉽지만, 예전 프로젝트들은 자바로 개발 되어서 난항을 겪는다..
어쨌든 밥은 먹고 살아야하니 git에서 소스를 내려받아 빌드를 하는데 잘 되지 않았다.
콘솔에 출력된 로그를 보니 &amp;lt;&amp;lt; 연산자 때문이었는데, 찾아보니 gradle 버전이 5.0 으로 업데이트 되면서 해당 연산자를 사용하지 않게 됐다고 한다. 따라서 doLast로 교체하거나 다른 gradle 버전을 이용해서 빌드를 해야하는데, 최대한 기존 프로젝트를 수정하고 싶지 않아서 사용하고 있는 gradle 버전을 변경하기로 했다.</description>
    </item>
    
    <item>
      <title>[WSL] WSL 한글 입력하기</title>
      <link>/linux/wsl/use-korean/</link>
      <pubDate>Thu, 07 Jan 2021 16:18:55 +0900</pubDate>
      
      <guid>/linux/wsl/use-korean/</guid>
      <description>WSL을 설치 후 X DISPLAY 서버 설정까지 모두 마쳤다. 그런데 문제가 있었다. 한글 입력이 제대로 안된다는 것이다..!
한글을 제대로 입력하기 위해서 입력기를 설치해야한다. 리눅스에는 fcitx, uim 등의 입력기가 있지만, 전에 사용하던 우분투 데스크탑에서 fcitx를 사용했기 때문에 fcitx 기준으로 포스팅한다.
원하는 한글 폰트를 먼저 설치한 후에, 패키지 관리자를 이용하여 fcitx를 설치한다.
sudo apt install fcitx fcitx-hangul dbus-x11 설치가 끝나면 콘솔창에 im-config 명령어를 입력하여 fcitx를 기본 입력기로 설정한다.
기본 입력기로 설정 후, ~/.</description>
    </item>
    
    <item>
      <title>[WSL] 외부에서 WSL에 접근할 수 있도록 설정하기</title>
      <link>/linux/wsl/ssh_port_forwarding/</link>
      <pubDate>Sun, 03 Jan 2021 22:14:59 +0900</pubDate>
      
      <guid>/linux/wsl/ssh_port_forwarding/</guid>
      <description>WSL을 설치하고 외부에서 접속하기 위해 포워딩 설정을 하고 테스트까지 마쳤다. 그리고 퇴근 후 다시 접속을 시도했는데 잘 되지 않았다. 다음 날 확인해보니 WSL2의 ip주소가 변경되어 있었다.
WSL2은 Hyper-V처럼 가상 이더넷을 생성하여 별도의 네트워크로 구성된다.
위와 같은 특징 때문에 부팅할 때 마다 WSL의 ip주소가 계속 바뀐다는 것을 알게 된 후, 이를 해결할 방법을 찾다가 적절한 해결책을 찾아 공유하게 되었다.
아래 코드를 파워쉘 스크립트로 작성 후, 적절한 이름으로 저장한다.
C:\Windows\System32\bash.exe -c &amp;#34;sudo service ssh start&amp;#34; $remoteport = bash.</description>
    </item>
    
    <item>
      <title>[WSL] WSL에서 GUI 프로그램 실행 환경 구성하기</title>
      <link>/linux/wsl/use-xserver/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:26 +0900</pubDate>
      
      <guid>/linux/wsl/use-xserver/</guid>
      <description>최근까지 회사 컴퓨터 OS로 Ubuntu를 잘사용하다가 윈도우로 갈아탔다. wine을 이용해 카카오톡도 설치하고 잘사용하던 OS를 변경한 이유는 여러가지가 있었지만 (일부 사이트 이용 제한, 사내 문서 공유 등..) 가장 큰 이유는 WSL 때문이었다.
WSL(Windows Subsystem for Linux) 이란 이름 그대로 Linux용 Windows 하위 시스템으로 사용자가 기존 가상 머신의 오버헤드 또는 듀얼 부팅 설정 없이 대부분의 GNU/Linux 환경을 수정하지 않고 Windows에서 직접 실행할 수 있게 해준다. 공식문서를 통해 쉽게 설치할 수 있다.
WSL 설치 및 WSL 2로 업데이트</description>
    </item>
    
  </channel>
</rss>
